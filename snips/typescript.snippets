snippet imf "import from" b
import ${2:\{ $0 \}} from '$1';
endsnippet

snippet imfa "import * as from" b
import * as $0 from '$1';
endsnippet

snippet cl "console.log"
console.log($0)
endsnippet

snippet doc "ts doc" b
/**
 * $0
 */
endsnippet

snippet docm "ts doc method" b
/**
 * $1
 * @param $2 { $3 }
 * @returns { $0 }
 */
endsnippet

snippet ip "interface property readonly" b
/**
 * $1
 * @type { $3 }
 */
readonly $2: $3;
endsnippet

snippet ips "interface prop string" b
/**
 * $1
 * @type { String }
 */
readonly $2: string;
endsnippet

snippet ipn "interface prop number" b
/**
 * $1
 * @type { Number }
 */
readonly $2: number;
endsnippet

snippet ipb "interface prop boolean" b
/**
 * $1
 * @type { Boolean }
 */
readonly $2: boolean;
endsnippet

snippet cp "class property" b
/**
 * $1
 * @type { $2 }
 */
public readonly $3: $2;
endsnippet

snippet cpn "class property number" b
/**
 * $1
 * @type { Number }
 */
public readonly $2: number;
endsnippet

snippet cps "class property string" b
/**
 * $1
 * @type { String }
 */
public readonly $2: string;
endsnippet

snippet cpb "class property boolean" b
/**
 * $1
 * @type { Boolean }
 */
public readonly $2: boolean;
endsnippet

snippet parsconf "parser config" b
/**
 * Config $1
 * @type { ParserConfigModel<$2> }
 */
private static readonly $3: ParserConfigModel<$2> = new ParserConfigModel<$2>({
  mappings: ${4:new Array<keyof $2>($0)},
	validators: {

	},
  transformers: {

  }
});
endsnippet

snippet th "TypeHelper"
TypeHelper.getType<$1>($0)
endsnippet

snippet tth "transformer TypeHelper"
(value: string): $1 => TypeHelper.getType<$1>(value)$0
endsnippet

snippet it "It test" b
it(
  '$1',
  async (): Promise<void> => {
    $0
  },
  60000
);
endsnippet

snippet narr "new Array"
Array<$1> = new Array<$1>($0);
endsnippet

snippet iferr "if error check"
if ($1 instanceof ErrorModel) {
  $0
}
endsnippet

snippet hiferr "handler if error check"
if ($1 instanceof ErrorModel) {
  return HandlerHelper.fail<NothingType>($1.description, HttpStatusEnum.InternalServerError, NOTHING);
}
endsnippet

snippet mon "monad type"
MonadType<${1:NothingType}>$0
endsnippet

snippet pconst "public constructor"
public constructor(params: SignatureOfType<$1>) {
	$0
}
endsnippet

snippet tp "type property readonly" b
/**
 * $1
 * @type { $3 }
 */
$2: $3;
endsnippet

snippet tps "type prop string" b
/**
 * $1
 * @type { String }
 */
$2: string;
endsnippet

snippet tpn "type prop number" b
/**
 * $1
 * @type { Number }
 */
$2: number;
endsnippet

snippet tpb "type prop boolean" b
/**
 * $1
 * @type { Boolean }
 */
$2: boolean;
endsnippet

